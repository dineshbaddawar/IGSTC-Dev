public class RegistrationForm_Controller {

        static String code;
        public Boolean isSignUp                 {get;set;}
        public Boolean isLogin                  {get;set;}
        public Boolean isCustomer               {get;set;}
        public Boolean isCandidate              {get;set;}
        public boolean isMentorExist            {get;set;}
        public string  name                     {get;set;}
        public string  FbId                     {get;set;}
        public string  gId                      {get;set;}
        public string  gFname                   {get;set;}
        public string hasCodeUpdate             {get;set;}
        public string Error                     {get;set;}
        public static final String SITE  =      'Login';
        public string currentUserId             {get;set;}
        public string hasCode                   {get;set;}
        public string currentdonorId            {get;set;}
        public Boolean SignupCandidate          {get;set;}
        public Boolean SignupCustomer           {get;set;}
        public Boolean docUplaodCustomer        {get;set;}
        public string isFBcustomerSignup        {get;set;}
        public string isFBcandidateSignup       {get;set;}
        public string selfAssesmentQuestions    {get;set;}
        public string jobFuncList               {get;set;}
        public string asignmentStatusList       {get;set;}
        public string jobShiftTimings           {get;set;}
        public string jobShiftAvailiblity       {get;set;}
        public string industryType              {get;set;}
        public String candidateSiteURL          {get;set;}
        public String candidateHashcode         {get;set;}
        public static String candidateId        {get;set;}
        public String ApplicantPortalSiteURL          {get;set;}


        public PageReference redirectProfilePage(){
            system.debug('redirectProfilePage--');
            code                        = ApexPages.currentPage().getParameters().get('code');
            SignupCandidate            = ApexPages.currentPage().getParameters().get('m') == '2' ? true : false;
            SignupCustomer            = ApexPages.currentPage().getParameters().get('m') == '1' ? true : false;
            isLogin            = ApexPages.currentPage().getParameters().get('m') == '0' ? true : false;
            system.debug('ApexPages.currentPage().getParameters().get--'+ApexPages.currentPage().getParameters().get('m'));
            system.debug('code---'+code+'---SignupCandidate----'+SignupCandidate+'---SignupCustomer----'+SignupCustomer+'---isLogin----'+isLogin);
            Cookie cookieObj            = new Cookie('googleCode', code, null, 100, false);
            Cookie cookieLoginTypeObj   = new Cookie('loginType', 'googleLogin', null, 86400, false);
            Cookie isCandidate              = new Cookie('isSignupCandidate',SignupCandidate == true ? 'true' : 'false', null, 100, false);
            Cookie isCustomer               = new Cookie('isSignupCustomer',SignupCustomer == true ? 'true' : 'false', null, 100, false);
            Cookie isLogin                  = new Cookie('isLogin',isLogin == true ? 'true' : 'false', null, 100, false);
            PageReference MyNewPage     = Page.redirectProfilePage;

            MyNewPage.setCookies(new Cookie[]{cookieObj, cookieLoginTypeObj,isCandidate,isCustomer,isLogin});
            
            MyNewPage.setRedirect(true);
            return MyNewPage;
            
        }
        @RemoteAction
        public static Map<String, SignUpDetails__mdt> getSignupSettings(){
            
                Map<String, SignUpDetails__mdt> mapEd = SignUpDetails__mdt.getAll();
                Map<String, SignUpDetails__mdt> signupMap = new Map<String, SignUpDetails__mdt>();
                for(SignUpDetails__mdt tempObj : mapEd.values()){
                    if(tempObj.Active__c)
                    signupMap.put(tempObj.AuthType__c,tempObj);
                }
                return signupMap;   
        }

        public void googleAuth(){
            try{
                system.debug('google auth');
                Cookie logType = ApexPages.currentPage().getCookies().get('loginType');
                system.debug('loginid::'+logType);
                system.debug('logType.getValue() -----'+logType.getValue());
                if(logType.getValue()   == 'googleLogin'){
                    try{
                        //recordType = '';
                        Cookie candidate = ApexPages.currentPage().getCookies().get('isSignupCandidate');
                        Cookie customer = ApexPages.currentPage().getCookies().get('isSignupCustomer');
                        Cookie Login = ApexPages.currentPage().getCookies().get('isLogin');
                        system.debug('SignupCandidate----'+candidate.getValue());
                        system.debug('SignupCustomer----'+customer.getValue());
                        if(candidate.getValue() == 'True'){
                            SignupCandidate = True;
                            system.debug('SignupCandidate----');
                        }
                        if(customer.getValue() == 'True'){
                            SignupCustomer = True;
                            system.debug('SignupCustomer----');
                        }
                        if(Login.getValue() == 'True'){
                            islogin = True;
                        }
                        system.debug('registrationFromGoogle'); 
                        String authCode ;        
                        System.debug(Apexpages.currentPage().getParameters().get('code'));
                        Cookie lkcode = ApexPages.currentPage().getCookies().get('googleCode');
                        System.debug('CODE'+lkcode);
                        if(lkcode != null){
                            code = lkcode.getValue();
                            Cookie cookiegObj   = new Cookie('googleCode', '', null, 100, false);
                            ApexPages.currentPage().setCookies(new Cookie[]{cookiegObj});
                        }
                        if(String.isBlank(code)){
                            Cookie gSessId = ApexPages.currentPage().getCookies().get('googleSessionId');
                            if(gSessId != null){
                                authCode = gSessId.getValue();
                            }
                        }
                        System.debug('code'+code);
                        if(!String.isBlank(code)){
                            if(candidate.getValue() == 'True'){
                                    System.debug('code @ 134');
                                authCode = LoginAuthentication_Helper.getGoogleAuthCode(code,'candidate');
                            }
                            if(customer.getValue() == 'True'){
                                System.debug('code @ 138');
                                authCode = LoginAuthentication_Helper.getGoogleAuthCode(code,'customer');
                            }
                            if(Login.getValue() == 'True'){
                                System.debug('code @ 142');
                                authCode = LoginAuthentication_Helper.getGoogleAuthCode(code,'login');
                            }
                            authCode = LoginAuthentication_Helper.getGoogleAuthCode(code,'login');
                            
                        }
                        System.debug('AUTHCODE'+AUTHCODE);
                        if(!String.isBlank(authCode)){
                            System.debug('AUTHCODE');
                            if(!authCode.equalsIgnoreCase('Error')){
                                GooglePublicDetailsClass.GoogleDetails gResp = LoginAuthentication_Helper.getGoogleEmail(authCode);
                                System.debug('gResp---'+gResp);
                                system.debug('gResp.email===='+gResp.email);
                                if(gResp != null && !String.isBlank(gResp.email)){
                                    gId = gResp.email;
                                    gFname = gResp.firstName;
                                    System.debug('AUTHCODE');
                                    try{
                                        list<Contact> currentCandidate    = [Select id,name,Login_Hash_Code__c,status__c from Contact where Email =:gResp.email];
                                        system.debug('currentCandidate------'+currentCandidate);
                                        if(currentCandidate.size() >0){
                                                currentdonorId          = currentCandidate[0].Id;
                                                Contact contact=new Contact();
                                                contact.Login_Hash_Code__c=FacebookAuthHandler.generateRandomString();
                                                contact.Id=currentdonorId;
                                                hasCode=contact.Login_Hash_Code__c;
                                                system.debug('inside if');
                                                update contact;
                                        
                                        }else{

                                            SignupCandidate = true;
                                        }
                                        
                                        System.debug('HASH CODE===>'+contact.Login_Hash_Code__c);
                                        
                                        Cookie cookieObj1 = new Cookie('googleSessionId', authCode, null, 3600, false);
                                        ApexPages.currentPage().setCookies(new Cookie[]{cookieObj1});
                                    }catch(Exception e){
                                        system.debug(e.getMessage());
                                    }
                                }
                            }
                        }
                        
                    }catch(Exception e){
                        system.Debug('linenum------'+e.getLineNumber()+'error-------'+e.getMessage());
                    }
                }  
            }catch(exception e){
                system.debug('get line---'+e.getLineNumber()+'--message--'+e.getMessage());
            }
        }

        public PageReference checkUserAuth(){
            isMentorExist=false;
            PageReference pg   = new PageReference('/'); 
            string encStudentId   = Apexpages.currentPage().getParameters().get('encStudentId');
            string hashCode     = Apexpages.currentPage().getParameters().get('d');  
            
            system.debug('hashCode===>'+hashCode + 'enc StudentId====>'+encStudentId);  
            
            if(encStudentId != null){
                currentUserId          = FacebookAuthHandler.decryptString(encStudentId, 'FFE12ORDER34KEY56QWERTY56QAXWSX');
                Cookie cookieEncStudent   = new Cookie('cookieEncStudent', currentUserId, null, 86400, false);
                ApexPages.currentPage().setCookies(new Cookie[]{cookieEncStudent});            
            }
            
            if(hashCode != null){
                Cookie cookiehashCode   = new Cookie('hashCodeLog', currentUserId, null, 1800, false);
                ApexPages.currentPage().setCookies(new Cookie[]{cookiehashCode});
            }
            
            if(currentUserId == null){
                Cookie encStd = ApexPages.currentPage().getCookies().get('cookieEncStudent');
                system.debug('encStd==>'+encStd);
                if(encStd != null) currentUserId = encStd.getValue();
                if(currentUserId != null){
                    Cookie cookieEncDonor   = new Cookie('cookieEncStudent', currentUserId, null, 86400, false);
                    ApexPages.currentPage().setCookies(new Cookie[]{cookieEncDonor}); 
                }            
            }
            
            
            if(currentUserId == null){
                Cookie chashcode = ApexPages.currentPage().getCookies().get('hashCodeLog');
                if(chashcode != null) currentUserId    = chashcode.getValue();
                if(currentUserId != null){
                    Cookie cookiehashCode   = new Cookie('hashCodeLog', currentUserId, null, 1800, false);
                    ApexPages.currentPage().setCookies(new Cookie[]{cookiehashCode});
                }          
            }
            System.debug('currentUserId'+currentUserId);
            if(currentUserId == null || currentUserId==''){
                Cookie logType = ApexPages.currentPage().getCookies().get('loginType');
                system.debug('loginid::'+logType);
                //system.debug('logTypetValue----'+logType.getValue());
                if(logType != null){
                    if(logType.getValue()   == 'googleLogin'){
                        try{
                            Cookie candidate = ApexPages.currentPage().getCookies().get('isSignupCandidate');
                            Cookie customer = ApexPages.currentPage().getCookies().get('isSignupCustomer');
                            system.debug('SignupCandidate----'+candidate.getValue());
                            system.debug('SignupCustomer----'+customer.getValue());
                            if(candidate.getValue() == 'True'){
                                SignupCandidate = True;
                                system.debug('SignupCandidate----');
                            }
                            if(customer.getValue() == 'True'){
                                SignupCustomer = True;
                                system.debug('SignupCustomer----');
                            }
                            //recordType = '';
                            checkGoogleAuth();
                            system.debug('registrationFromGoogle');
                            //PageReference pageRef = new PageReference('https://testingv2-leadersinternational.cs18.force.com/login/redirectprofilepage');
                            
                        }catch(Exception e){
                            system.Debug('linenum------'+e.getLineNumber()+'error-------'+e.getMessage());
                            system.debug('pg'+pg);
                            return pg;
                        }
                    }
                    if(logType.getValue()   == 'fbLogin'){
                        try{
                            Cookie candidate = ApexPages.currentPage().getCookies().get('isSignupCandidate');
                            Cookie customer = ApexPages.currentPage().getCookies().get('isSignupCustomer');
                            system.debug('SignupCandidate----'+candidate.getValue());
                            isFBcustomerSignup = customer.getValue();
                            isFBcandidateSignup = candidate.getValue();
                            system.debug('SignupCustomer----'+customer.getValue());
                            system.debug('checkFacebookAuth----');
                            
                            checkFacebookAuth();  
                            if(ApexPages.currentPage().getCookies().get('signUp').getValue() == 'true') {
                                isSignUp = true;
                                System.debug('facebook signup');
                                return null;
                            }
                            if(ApexPages.currentPage().getCookies().get('Login').getValue() == 'true') {
                                isLogin = true;
                                System.debug('facebook login');
                                return null;
                            }
                            
                        }catch(Exception e){
                            system.debug('exception '+e.getMessage()+'line no '+e.getLineNumber());
                            return pg;
                        }
                    }
                    
                }else{
                    return pg;
                }
            }
            
            // If current user is not an authorized user 
            // then redirect to login page
            system.debug('currentUserId-----'+currentUserId);
            if(currentUserId == null) return pg;
            
            return null;
        }

        public void checkGoogleAuth(){
            
            String authCode ;        
            System.debug(Apexpages.currentPage().getParameters().get('code'));
            Cookie lkcode = ApexPages.currentPage().getCookies().get('googleCode');
            System.debug('CODE'+lkcode);
            System.debug(ApexPages.currentPage().getCookies());
            if(lkcode != null){
                code = lkcode.getValue();
                Cookie cookiegObj   = new Cookie('googleCode', '', null, 100, false);
                ApexPages.currentPage().setCookies(new Cookie[]{cookiegObj});
            }
            
            if(String.isBlank(code)){
                Cookie gSessId = ApexPages.currentPage().getCookies().get('googleSessionId');
                if(gSessId != null){
                    authCode = gSessId.getValue();
                }
            }
            System.debug('code'+code);
            if(!String.isBlank(code)){
                authCode = LoginAuthentication_Helper.getGoogleAuthCode(code,LoginAuthentication_Helper.DONOR_STIE);
                System.debug('authCode'+authCode);
            }
            System.debug('AUTHCODE');
            if(!String.isBlank(authCode)){
                System.debug('AUTHCODE');
                if(!authCode.equalsIgnoreCase('Error')){
                    GooglePublicDetailsClass.GoogleDetails gResp = LoginAuthentication_Helper.getGoogleEmail(authCode);
                    System.debug('gResp---'+gResp);
                    system.debug('gResp.email===='+gResp.email);
                    if(gResp != null && !String.isBlank(gResp.email)){
                        gId = gResp.email;
                        System.debug('AUTHCODE');
                        try{
                            list<Contact> currentdonor    = [Select id,name,Login_Hash_Code__c from Contact where Email =:gResp.email];
                            if(currentdonor.size() >0){
                                currentdonorId          = currentdonor[0].Id;
                                Contact contact=new Contact();
                                contact.Login_Hash_Code__c=FacebookAuthHandler.generateRandomString();
                                contact.Id=currentdonorId;
                                hasCode=contact.Login_Hash_Code__c;
                                system.debug('inside if');
                                update contact;
                            }else{
                                /*  Contact contact=new Contact();
                                contact.LastName = gResp.lastName;
                                contact.firstName = gResp.firstName;
                                contact.Email = gResp.email;
                                contact.Login_Hash_Code__c = FacebookAuthHandler.generateRandomString();
                                //contact.Last_Hash_Code_Updated__c = System.now();
                                hasCode = contact.Login_Hash_Code__c ;
                                system.debug('inside else');
                                insert contact;  
                            */
                                SignupCandidate = true;
                            }
                            
                            System.debug('HASH CODE===>'+contact.Login_Hash_Code__c);
                            
                            Cookie cookieObj1 = new Cookie('googleSessionId', authCode, null, 3600, false);
                            ApexPages.currentPage().setCookies(new Cookie[]{cookieObj1});
                        }catch(Exception e){
                            system.debug(e.getMessage());
                        }
                    }
                }
            }
            
        }
        public void checkFacebookAuth(){
            String authCode ;        
            Cookie lkcode = ApexPages.currentPage().getCookies().get('facebookCode');
            
            string isSignup = ApexPages.currentPage().getCookies().get('signUp').getValue();
            string isLogin = ApexPages.currentPage().getCookies().get('Login').getValue();
            //string isCandidate = ApexPages.currentPage().getCookies().get('isCandidate').getValue();
            //string isCustomer = ApexPages.currentPage().getCookies().get('isCustomer').getValue();
            if(lkcode != null){
                code = lkcode.getValue();
                Cookie cookiefObj   = new Cookie('facebookCode', '', null, 100, false);
                ApexPages.currentPage().setCookies(new Cookie[]{cookiefObj});
            }
            if(String.isBlank(code)){
                Cookie gSessId = ApexPages.currentPage().getCookies().get('fbSessionId');   
                if(gSessId != null){
                    authCode = gSessId.getValue();
                }
            }
            system.debug('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@code'+code);
            string token;
            if(!String.isBlank(code)){
                Facebook_API_Details__c fad = Facebook_API_Details__c.getInstance();
                if(isLogin == 'true' || isFBcandidateSignup == 'true' || isFBcustomerSignup == 'true'){
                    token = FacebookAuthHandler.generateFBAuthCode(code,fad.Auth_Endpoint_URL__c,fad.login_Site_URL__c, fad.App_Id__c, fad.App_Secret__c);    
                }else{
                    system.debug('is candiddate');
                    token = FacebookAuthHandler.generateFBAuthCode(code,fad.Auth_Endpoint_URL__c,fad.candidate_login_site_url__c, fad.App_Id__c, fad.App_Secret__c);   
                }
                
                system.debug('is token---'+token);
            }
            
            if(!String.isBlank(token)){
                Facebook_API_Details__c fad = Facebook_API_Details__c.getInstance();
                String fbEmail  = FacebookAuthHandler.getFBPublicDetails(fad.Endpoint_URL__c, fad.App_Id__c, fad.App_Secret__c, token);
                FbId            = fbEmail;
                name            = FacebookAuthHandler.name;
                system.debug('fbEmail----------'+fbEmail);
                system.debug(name);
                if(!String.isBlank(fbEmail)){
                    
                    try{
                        if(isLogin == 'true'){
                            system.debug('login is true-----');
                        }
                        system.debug('isLogin------'+isLogin);
                        system.debug('fbEmail------'+fbEmail);
                        
                        Contact[] currentUser;
                        //currentUser     = [Select id,Internal_Status__c,RecordTypeId,RecordType.developerName from Contact where (Email =:fbEmail OR Facebook_login_ID__c =:fbEmail) and (RecordTypeId=:conStdRecordTypeId OR RecordTypeId=:conFacRecordTypeId OR RecordTypeId=:manRecordTypeId)];
                        currentUser     = [Select id,name,status__c,Login_Hash_Code__c from Contact where Email =:fbEmail]; 
                        system.debug('currentUser--'+currentUser);
                        
                        string recordType;
                        Boolean isSignupFromFb;
                        if (currentUser.size() > 0){
                            
                                currentUserId           = currentUser[0].Id;
                                System.debug('FBEMAIL  '+fbEmail);
                                Contact contact=new Contact();
                                contact.Login_Hash_Code__c=FacebookAuthHandler.generateRandomString();
                                hasCodeUpdate=contact.Login_Hash_Code__c;
                                contact.id=currentUser[0].id;
                                update contact;
                                System.debug('LOGIN HASHCODE===>'+contact.Login_Hash_Code__c);
                                SignupCandidate = false;
                            
                            
                            Cookie cookieObj1 = new Cookie('fbSessionId', authCode, null, 3600, false);
                            ApexPages.currentPage().setCookies(new Cookie[]{cookieObj1});
                            return ;
                        }
                        else{
                                /* Contact contact=new Contact();
                                contact.lastName = FacebookAuthHandler.name;
                                contact.email = fbEmail;
                                contact.Login_Hash_Code__c=FacebookAuthHandler.generateRandomString();
                                hasCodeUpdate=contact.Login_Hash_Code__c;
                                insert contact; */
                                //   isSignupFromFb = true;
                                //    SignupCandidate = true;
                                System.debug('isSignupFromFb---'+isSignupFromFb);
                                Cookie cookieObj1 = new Cookie('fbSessionId', authCode, null, 3600, false);
                                ApexPages.currentPage().setCookies(new Cookie[]{cookieObj1});
                        }
                        
                    }
                    catch(Exception e){
                        system.debug(e.getMessage());
                    }
                }
            }
        } 

        public PageReference redirectProfilePagefoFB() {
            isSignUp            = false;
            isLogin         = false;
            system.debug('redirectProfilePagefoFB cookiessssssssssssss');
            system.debug('ApexPages.currentPage().getParameters().get(m)------'+ApexPages.currentPage().getParameters().get('m'));
            code                        = ApexPages.currentPage().getParameters().get('code');
            isSignUp            = ApexPages.currentPage().getParameters().get('m') == '1' ? true : false;
            string mValue = ApexPages.currentPage().getParameters().get('m');
            system.debug('code----'+code);
            if(mValue == '1'|| mValue == '2'){
                isSignUp = True;
                system.debug('isSignUp---'+isSignUp);
            }
            isLogin             = ApexPages.currentPage().getParameters().get('m') == '0' ? true : false;
            isCustomer          = ApexPages.currentPage().getParameters().get('m') == '1' ? true : false;
            isCandidate         = ApexPages.currentPage().getParameters().get('m') == '2' ? true : false;
            Cookie cookieObj            = new Cookie('facebookCode', code, null, 100, false);
            Cookie cookieLoginTypeObj   = new Cookie('loginType', 'fbLogin', null, 86400, false);
            Cookie mSite                = new Cookie('signUp',isSignUp == true ? 'true' : 'false', null, 100, false);
            Cookie aSite                = new Cookie('Login',isLogin == true ? 'true' : 'false', null, 100, false);
            Cookie isCandidate              = new Cookie('isSignupCandidate',isCandidate == true ? 'true' : 'false', null, 100, false);
            Cookie isCustomer               = new Cookie('isSignupCustomer',isCustomer == true ? 'true' : 'false', null, 100, false);
            system.debug('code'+code);
            system.debug('isSignUp'+isSignUp);
            Facebook_API_Details__c fad = Facebook_API_Details__c.getInstance();
            // String token = FacebookAuthHandler.generateFBAuthCode(code,fad.Auth_Endpoint_URL__c,fad.login_Site_URL__c, fad.App_Id__c, fad.App_Secret__c);    
            // FacebookAuthHandler.getFBPublicDetails(fad.Endpoint_URL__c,fad.App_Id__c,fad.App_Secret__c,token);
            // system.debug('token'+token);
            PageReference MyNewPage     = Page.RedirectToFBProfilePage;
            
            MyNewPage.setCookies(new Cookie[]{cookieObj, cookieLoginTypeObj, mSite,aSite,isCandidate,isCustomer});
            
            MyNewPage.setRedirect(true);
            return MyNewPage;
        }

        @RemoteAction
        public static String insertContact(Contact contactDetails, String companyName){
            try{
                Account acc = New Account();
                acc.Name = companyName;
                insert acc;
                contactDetails.AccountId = acc.Id; 
                contactDetails.Login_Hash_Code__c = Utility.generateRandomString();
                insert contactDetails;
                return contactDetails.Login_Hash_Code__c ;
            }catch(Exception e){
                return 'ERROR';
            }
        }


        @RemoteAction
        public static contact loginUser(string userName, string password){
            try{
                list<contact> conRec = [select firstName,LastName,id,email from contact where email =:userName AND Password__c =:password limit 1];
                system.debug('conRec----'+conRec);
                if(conRec.size() > 0 ){
                    Contact Rev = new Contact();
                    Rev.Login_Hash_Code__c = Utility.generateRandomString();
                    Rev.Id = conRec[0].Id;
                    System.debug('The Hash Code Value');
                    update Rev;
                    return Rev;
                }else{
                    return null;
                }
            }catch(exception e){
                system.debug(e.getLineNumber()+'---error Message---'+e.getMessage());
                return null;
            }   
        }

        // Forgot Reset Application Portal
        @RemoteAction
        Public Static String ForgotPassapplication(String emailId){
            try{
                List<Contact> conList = [SELECT Name,Email, Password__c, Login_Hash_Code__c FROM Contact WHERE Email =: emailId];
            if(conList.size()>0){
            String currentConId;
            String hasCode;
            currentConId = conList[0].id;
            Contact con = new Contact();
            con.Login_Hash_Code__c = Utility.generateRandomString();
            con.Id = currentConId;
            hasCode = String.valueOf(con.Login_Hash_Code__c);

            List<Messaging.SingleEmailMessage> mailList = new List<Messaging.SingleEmailMessage>();
            EmailTemplate temp = [SELECT Id,Name,HTMLValue,Subject, Body FROM EmailTemplate WHERE Name = 'Application Forget Password'];
            String htmlBody = temp.HTMLValue;
            String subject = temp.Subject;
            String plainTextBody = temp.body;

            htmlBody = htmlBody.replace('{!Contact.Name}', conList[0].Name);
            htmlBody = htmlBody.replace('{!Contact.Login_Hash_Code__c}', con.Login_Hash_Code__c);
              htmlBody = htmlBody.replace('{!$Label.ApplicationPasswordReset}', Label.ApplicationPasswordReset);
            String comingEmail =  conList[0].Email;
            System.debug('comingEmail--------->'+comingEmail);

            Messaging.SingleEmailMessage mailTemp = new Messaging.SingleEmailMessage();
            mailTemp.setHtmlBody(htmlBody);
            mailTemp.setSubject(subject);
            mailTemp.setPlainTextBody(plainTextBody);
            mailTemp.toAddresses = new String[] { conList[0].Email };
            mailList.add(mailTemp);

            if(!mailList.isEmpty()){
                Messaging.sendEmail(mailList);
            }
            update con;
            return con.Login_Hash_Code__c;
            }

            }catch(Exception e){
                    System.debug('The Error '+e.getMessage());
                    System.debug('Erron Line '+e.getLineNumber());
                    return null;
                }
                return null;
        }

        // Password Reset Application Portal
        @RemoteAction
        Public Static String ApplicationPasswordReset(String password, String loginhashcode){
            try{
            Contact conToUpdate = [SELECT Name,Email, Password__c, Login_Hash_Code__c FROM Contact WHERE Login_Hash_Code__c =: loginhashcode LIMIT 1];
            conToUpdate.Password__c = password;
            conToUpdate.Login_Hash_Code__c = Utility.generateRandomString();
            update conToUpdate;
            return conToUpdate.Login_Hash_Code__c;
            }catch(Exception e){
            System.debug('The Error---->'+e.getMessage());
            System.debug('The Error Line---->'+e.getLineNumber());
            }
            return null;
        }

        }